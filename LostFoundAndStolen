enum signalStates {INERT, GO, RESOLVE};  //00, 01, 10 in [A] [B]
byte signalState = INERT;

enum blinkCommss {ONE, TWO, FOUR, SIX, WINTHREE, WINTWO, WINONE, NOWINNER, TOGGLEHIDESECRET, TOGGLETEAM, CHECKWINNER, RESETALL,
TOGGLERAINBOW, RIPPLE, NULLCOMM}; //000, 001, 010, 100, 011, 101, 110, 111 in [C] [D] [E] [F]
//blinkComms has 16 distinct options
//byte blinkComms[16] = {ONE, TWO, FOUR, ONE, THREE, ONE};
//array to loop through for each face when sending comms
byte blinkComms[6] = {TWO, NULLCOMM, NULLCOMM, NULLCOMM, NULLCOMM, NULLCOMM};
bool twoAvail = true;
bool fourAvail = true;
bool sixAvail = true;
//byte numberToSend = 0;
bool hideSecret = false;
byte secretNumberIterator = 1;
//will be real # -1
byte treasureSecretsReceived[6] = {0, 0, 0, 0, 0, 0}; // reads all faces to compare secret #s
//setting to 6 means no winning face

bool isFirstTeamTreasure = false;
bool waitingAfterLoss = false;
enum treasureTypes {NotTreasure, FullTreasure, TeamTreasure3, TeamTreasure2, TeamTreasure1, TeamTreasure0};
byte treasureType = NotTreasure;

byte clickDim = 255;

Color teamColors[] = { RED, ORANGE, YELLOW, GREEN, BLUE, MAGENTA };
byte currentTeamColor = 0;
Color displayColor[] = {OFF,OFF,OFF,OFF,OFF,OFF};
byte teamColorTreasure;

int winningFace = 7;
int countTwo = 0;
int countFour = 0;
int countSix = 0;
bool blockSteal = false;
bool dimAfterLoss = false;

Timer checkWinnerTimer;
#define CHECKING_DURATION 3000
Timer pointToWinnerTimer;
#define POINTING_DURATION 6000
Timer sparkleTimer;
#define SPARKLE_DURATION 100
Timer checkingFaceTimer;
int checkingFace = 0;
Timer simpleIterateFaceTimer;
int simpleIterateFace = 0;
Timer facetFaceRotationTimer;
int baseFacetFace=0;
Timer blinkFace0Timer;
bool blinkFace0On = false;

bool skipSendingSecretNumber = false;

void setup(){
  
}

void loop() {
  switch (signalState) {
    case INERT:
      inertLoop();
      break;
    case GO:
      goLoop();
      break;
    case RESOLVE:
      resolveLoop();
      break;
  }

    displayFaceColor();

    FOREACH_FACE(f) {
      byte sendData = (signalState << 4) + (blinkComms[f]);
      setValueSentOnFace(sendData, f);   
    }
}

void inertLoop() {
  if(blinkComms[0] == RESETALL){
    resetAll();
  }
      //BANDIT
  else if(treasureType == NotTreasure){
//  if(!amTreasure && !amTeamTreasure1 && !amTeamTreasure2 && !amTeamTreasure3){    
    skipSendingSecretNumber = false;
    if(waitingAfterLoss && checkWinnerTimer.isExpired()){
      waitingAfterLoss = false;
      secretNumberIterator = 6;
      //dim after loss
      dimAfterLoss = true;
    }
    
    if (buttonLongPressed()) {
        //cycle team color
        currentTeamColor = (currentTeamColor + 1) % 6;
        //cycle all team colors for cluster
        FOREACH_FACE(f) {
          blinkComms[f] = TOGGLETEAM;
        }
        signalState = GO;
        skipSendingSecretNumber = true;
    }
      
    if ( buttonSingleClicked() && !hideSecret) {
      dimAfterLoss = false;
      if(twoAvail && fourAvail && sixAvail) {
        //increment clickCount 
        secretNumberIterator = (secretNumberIterator + 2) % 6;
      }
      else if(fourAvail && twoAvail){
        switch (secretNumberIterator) {
          case 6:
            secretNumberIterator = 1;
            break;
          case 1:
            secretNumberIterator = 3;
            break;
          case 3:
            secretNumberIterator = 1;
            break;
        }
      }
      else if(fourAvail && sixAvail){
        switch (secretNumberIterator) {
          case 6:
            secretNumberIterator = 3;
            break;
          case 3:
            secretNumberIterator = 5;
            break;
          case 5:
            secretNumberIterator = 3;
            break;
        }
      }
      else if(twoAvail && sixAvail){
        switch (secretNumberIterator) {
          case 6:
            secretNumberIterator = 1;
            break;
          case 1:
            secretNumberIterator = 5;
            break;
          case 5:
            secretNumberIterator = 1;
            break;
        }
      }
      else if(twoAvail){
        if(secretNumberIterator == 6) {
            secretNumberIterator = 1;
        }
      }
      else if(fourAvail){
        if(secretNumberIterator == 6) {
            secretNumberIterator = 3;
        }
      }
      else if(sixAvail){
        if(secretNumberIterator == 6) {
            secretNumberIterator = 5;
        }
      }
      //dead Bandit
      else{
        dimAfterLoss = true;
        secretNumberIterator = 0;
      }
    }

    if (buttonDoubleClicked()) {
      hideSecret = !hideSecret;
      FOREACH_FACE(f) {
        blinkComms[f] = TOGGLEHIDESECRET;
      }
      signalState = GO;
      skipSendingSecretNumber = true;
    }
    
    if (buttonMultiClicked() && buttonClickCount() == 4 && isAlone()) {
        treasureType = FullTreasure;
        isFirstTeamTreasure = false;
    }

  //Bandits waiting for win result
    FOREACH_FACE(f) {
      if (!isValueReceivedOnFaceExpired(f)) {//we have a neighbor
        if (getSignalState(getLastValueReceivedOnFace(f)) == GO) {
          signalState = GO;
                     
            if(f == 0){
              if(getBlinkComms(getLastValueReceivedOnFace(f)) == WINTHREE){
                isFirstTeamTreasure = true;
                checkWinnerTimer.set(CHECKING_DURATION);
                pointToWinnerTimer.set(POINTING_DURATION);
                treasureType = TeamTreasure3;
                hideSecret = false;
                if(blinkComms[0] == TWO){
                  blockSteal = true;
                }
              }
              else if(getBlinkComms(getLastValueReceivedOnFace(f)) == WINTWO){
                isFirstTeamTreasure = true;
                checkWinnerTimer.set(CHECKING_DURATION);
                pointToWinnerTimer.set(POINTING_DURATION);
                treasureType = TeamTreasure2;
                hideSecret = false;
                if(blinkComms[0] == TWO){
                  blockSteal = true;
                }
              }
              else if(getBlinkComms(getLastValueReceivedOnFace(f)) == WINONE){
                isFirstTeamTreasure = true;
                checkWinnerTimer.set(CHECKING_DURATION);
                pointToWinnerTimer.set(POINTING_DURATION);
                treasureType = TeamTreasure1;
                hideSecret = false;
                if(blinkComms[0] == TWO){
                  blockSteal = true;
                }
              }
    
              else if(getBlinkComms(getLastValueReceivedOnFace(f)) == NOWINNER){
                hideSecret = false;
                switch (blinkComms[0]) {
                  case TWO:
                    twoAvail = false;
                    break;
                  case FOUR:
                    fourAvail = false;
                    break;
                  case SIX:
                    sixAvail = false;
                    break;
                }
                waitingAfterLoss = true;
                checkWinnerTimer.set(CHECKING_DURATION);
              }
            }
            if(getBlinkComms(getLastValueReceivedOnFace(f)) == TOGGLEHIDESECRET ){
              hideSecret = !hideSecret;
              skipSendingSecretNumber = true;
              FOREACH_FACE(f) {
                blinkComms[f] = TOGGLEHIDESECRET;
              }
            }
            if(getBlinkComms(getLastValueReceivedOnFace(f)) == TOGGLETEAM ){
              currentTeamColor = (currentTeamColor + 1) % 6;
              skipSendingSecretNumber = true;
              FOREACH_FACE(f) {
                blinkComms[f] = TOGGLETEAM;
              }
            }
            if(getBlinkComms(getLastValueReceivedOnFace(f)) == RESETALL ){
              skipSendingSecretNumber = true;
              FOREACH_FACE(f) {
                blinkComms[f] = RESETALL;
              }
            }
        }
      }
    }


    if(!skipSendingSecretNumber){
      switch (secretNumberIterator) {
        case 1:
          blinkComms[0] = TWO;
          break;
        case 3:
          blinkComms[0] = FOUR;
          break;
        case 5:
          blinkComms[0] = SIX;
          break;
      }
    }
  }

  //TREASURE
  else {
    if(blinkComms[0] == CHECKWINNER){
      checkForWinner();
    }
    if(isFirstTeamTreasure && checkWinnerTimer.isExpired()){
      isFirstTeamTreasure = false;
    }
        
    if ( buttonSingleClicked()) {
      blinkComms[0] = CHECKWINNER;
      blinkComms[1] = CHECKWINNER;
      blinkComms[2] = CHECKWINNER;
      blinkComms[3] = CHECKWINNER;
      blinkComms[4] = CHECKWINNER;
      blinkComms[5] = CHECKWINNER;
      signalState = GO;
    }
    
    if (buttonMultiClicked()){
//      if(buttonClickCount() == 4) {
//        treasureType = NotTreasure;
//        hideSecret = false;
//        twoAvail = true;
//        fourAvail = true;
//        sixAvail = true;
//        isFirstTeamTreasure = true;
//        secretNumberIterator = 1;
//        blockSteal = false;
//      }
      if (buttonClickCount() == 4) {
        blinkComms[0] = RESETALL;
        blinkComms[1] = RESETALL;
        blinkComms[2] = RESETALL;
        blinkComms[3] = RESETALL;
        blinkComms[4] = RESETALL;
        blinkComms[5] = RESETALL;
        signalState = GO;
      }
    }



  
//check for GO phase
    FOREACH_FACE(f) {
      if (!isValueReceivedOnFaceExpired(f)) {//we have a neighbor
        if (getSignalState(getLastValueReceivedOnFace(f)) == GO) {
          signalState = GO;
          
          blinkComms[0] = NULLCOMM;
          blinkComms[1] = NULLCOMM;
          blinkComms[2] = NULLCOMM;
          blinkComms[3] = NULLCOMM;
          blinkComms[4] = NULLCOMM;
          blinkComms[5] = NULLCOMM;
  
          if(getBlinkComms(getLastValueReceivedOnFace(f)) == CHECKWINNER){
              blinkComms[0] = CHECKWINNER;
              blinkComms[1] = CHECKWINNER;
              blinkComms[2] = CHECKWINNER;
              blinkComms[3] = CHECKWINNER;
              blinkComms[4] = CHECKWINNER;
              blinkComms[5] = CHECKWINNER;
//            checkForWinner();
//            checkWinnerTimer.set(CHECKING_DURATION);
//            pointToWinnerTimer.set(POINTING_DURATION);
          }
          if(getBlinkComms(getLastValueReceivedOnFace(f)) == RESETALL ){
            blinkComms[0] = RESETALL;
            blinkComms[1] = RESETALL;
            blinkComms[2] = RESETALL;
            blinkComms[3] = RESETALL;
            blinkComms[4] = RESETALL;
            blinkComms[5] = RESETALL;
          }          
        }
      }
    }
  }
}

void goLoop() {
    signalState = RESOLVE;//I default to this at the start of the loop. Only if I see a problem does this not happen  

//  look for neighbors who have not heard the GO news
  FOREACH_FACE(f) {
    if (!isValueReceivedOnFaceExpired(f)) {//a neighbor!
      if (getSignalState(getLastValueReceivedOnFace(f)) == INERT) {//This neighbor doesn't know it's GO time. Stay in GO
        signalState = GO;
      }
    }
  }
}

void resolveLoop() {
    signalState = INERT;//I default to this at the start of the loop. Only if I see a problem does this not happen

  //look for neighbors who have not moved to RESOLVE
  FOREACH_FACE(f) {
    if (!isValueReceivedOnFaceExpired(f)) {//a neighbor!
      if (getSignalState(getLastValueReceivedOnFace(f)) == GO) {//This neighbor isn't in RESOLVE. Stay in RESOLVE
        signalState = RESOLVE; 
      }
    }
  }
}

void resetAll(){
  twoAvail = true;
  fourAvail = true;
  sixAvail = true;
  treasureType = NotTreasure;
  isFirstTeamTreasure = false;
  hideSecret = false;
  secretNumberIterator = 1;
  isFirstTeamTreasure = false;
  blockSteal = false;
  blinkComms[0] = TWO;
  blinkComms[1] = NULLCOMM;
  blinkComms[2] = NULLCOMM;
  blinkComms[3] = NULLCOMM;
  blinkComms[4] = NULLCOMM;
  blinkComms[5] = NULLCOMM;
  signalState = GO;
}

void checkForWinner(){
  checkWinnerTimer.set(CHECKING_DURATION);
  pointToWinnerTimer.set(POINTING_DURATION);
  
  if(blockSteal){
    //all faces are losers
    FOREACH_FACE(f) {
      blinkComms[f] = NOWINNER;
    }
  }
  else{
    //get numbers sent
    countTwo = 0;
    countFour = 0;
    countSix = 0;
    winningFace = 7;
    FOREACH_FACE(f) {
      blinkComms[f] = NOWINNER;
      treasureSecretsReceived[f] = 0;
      if (!isValueReceivedOnFaceExpired(f) ){//a neighbor
        byte newNumberText = getBlinkComms(getLastValueReceivedOnFace(f));
        switch (newNumberText) {
          case TWO:
            treasureSecretsReceived[f] = 2;
            countTwo ++;
            break;
          case FOUR:
            treasureSecretsReceived[f] = 4;
            countFour ++;
            break;
          case SIX:
            treasureSecretsReceived[f] = 6;
            countSix ++;
            break;
        }
      } 
    }

    //Calculate if Winner
    if(countSix == 1){
      if(treasureSecretsReceived[0] == 6){
        winningFace = 0;
      }
      else if(treasureSecretsReceived[1] == 6){
        winningFace = 1;
      }
      else if(treasureSecretsReceived[2] == 6){
        winningFace = 2;
      }
      else if(treasureSecretsReceived[3] == 6){
        winningFace = 3;
      }
      else if(treasureSecretsReceived[4] == 6){
        winningFace = 4;
      }
      else if(treasureSecretsReceived[5] == 6){
        winningFace = 5;
      }
    }
    else if(countFour == 1){
      if(treasureSecretsReceived[0] == 4){
        winningFace = 0;
      }
      else if(treasureSecretsReceived[1] == 4){
        winningFace = 1;
      }
      else if(treasureSecretsReceived[2] == 4){
        winningFace = 2;
      }
      else if(treasureSecretsReceived[3] == 4){
        winningFace = 3;
      }
      else if(treasureSecretsReceived[4] == 4){
        winningFace = 4;
      }
      else if(treasureSecretsReceived[5] == 4){
        winningFace = 5;
      }
    }  
    else if(countTwo == 1){
      if(treasureSecretsReceived[0] == 2){
        winningFace = 0;
      }
      else if(treasureSecretsReceived[1] == 2){
        winningFace = 1;
      }
      else if(treasureSecretsReceived[2] == 2){
        winningFace = 2;
      }
      else if(treasureSecretsReceived[3] == 2){
        winningFace = 3;
      }
      else if(treasureSecretsReceived[4] == 2){
        winningFace = 4;
      }
      else if(treasureSecretsReceived[5] == 2){
        winningFace = 5;
      }
    }

    if(winningFace < 7){
      switch (treasureType) {
        case FullTreasure:
          blinkComms[winningFace] = WINTHREE;
          break;
        case TeamTreasure3:
          blinkComms[winningFace] = WINTWO;
          treasureType = TeamTreasure1;
          blockSteal = true;
          break;
        case TeamTreasure2:
          blinkComms[winningFace] = WINONE;
          treasureType = TeamTreasure1;
          break;
        case TeamTreasure1:
          blinkComms[winningFace] = WINONE;
          treasureType = TeamTreasure0;
          break;
      }
    }
  }
  signalState = GO;
}


byte setDisplayColor(Color f0, Color f1, Color f2, Color f3, Color f4, Color f5){
    displayColor[0] = f0;
    displayColor[1] = f1;
    displayColor[2] = f2;
    displayColor[3] = f3;
    displayColor[4] = f4;
    displayColor[5] = f5;
}

//byte fullSparkle(Color white, Color blue){
void fullSparkle(){
//  if( facetFaceRotationTimer.isExpired() ){
//    facetFaceRotationTimer.set(100);
//    baseFacetFace ++;
//  }
  int whiteShine = random(5);
//  int whiteShine2 = random(5)-3;
//  int whiteShine3 = random(2);
//  int blueShine = random(2);
//  int purpShine = random(5);
  Color blue2 = makeColorRGB(84,204,255);
  Color purp = makeColorRGB(134,125,255);
  
  displayColor[baseFacetFace] = blue2;
  displayColor[baseFacetFace+1] = purp;
  displayColor[baseFacetFace+2] = blue2;
  displayColor[baseFacetFace+3] = purp;
  displayColor[baseFacetFace+4] = blue2;
  displayColor[baseFacetFace+5] = purp;
//  displayColor[purpShine] = purp;    
  displayColor[whiteShine] = WHITE;
//  displayColor[blueShine] = blue;
//  displayColor[(blueShine+2)%6] = blue;
//  displayColor[whiteShine2] = WHITE;
//  displayColor[whiteShine3] = WHITE;
}


void displayFaceColor() {
  //default OFF to stop color lingering
  setColor(OFF);
    
  switch (signalState) {
    case INERT:

        //timer off
        if (checkWinnerTimer.isExpired()){
          //some type of Treasure
          if (treasureType == FullTreasure || treasureType == TeamTreasure1 || treasureType == TeamTreasure2 || treasureType == TeamTreasure3){
            if( sparkleTimer.isExpired() ){
              sparkleTimer.set(10);
              fullSparkle();
              FOREACH_FACE(f) {
                setColorOnFace(displayColor[f],f);
              }
            }
            //checking timer not running and Team Treasure so cover up sparkle with OFFs
            if(treasureType == TeamTreasure3){
              setColorOnFace(teamColors[currentTeamColor],0);
              setColorOnFace(teamColors[currentTeamColor],1);
              setColorOnFace(teamColors[currentTeamColor],5);
              if(blockSteal){
                setColorOnFace(WHITE,2);
                setColorOnFace(WHITE,3);
                setColorOnFace(WHITE,4);                
              }
            }
            if(treasureType == TeamTreasure2){
              setColorOnFace(teamColors[currentTeamColor],0);
              setColorOnFace(teamColors[currentTeamColor],1);
              setColorOnFace(teamColors[currentTeamColor],5);
              
              setColorOnFace(OFF,3);
              if(blockSteal){
                setColorOnFace(WHITE,2);
                setColorOnFace(WHITE,4);                
              }
            }
            else if(treasureType == TeamTreasure1){
              setColorOnFace(teamColors[currentTeamColor],0);
              setColorOnFace(teamColors[currentTeamColor],1);
              setColorOnFace(teamColors[currentTeamColor],5);
              
              setColorOnFace(OFF,2);
              setColorOnFace(OFF,4);
              if(blockSteal){
                setColorOnFace(WHITE,3);             
              }            
            }
            else if(treasureType == TeamTreasure0){
              setColorOnFace(teamColors[currentTeamColor],0);
              setColorOnFace(teamColors[currentTeamColor],1);
              setColorOnFace(teamColors[currentTeamColor],5);
              
              setColorOnFace(OFF,2);
              setColorOnFace(OFF,3);
              setColorOnFace(OFF,4);            
            }
          } 
          //is Bandit
        else{
          FOREACH_FACE(f) {
            if( f <= secretNumberIterator){
              setColorOnFace(dim(teamColors[currentTeamColor],clickDim),f);
            }
          }
          if( blinkFace0Timer.isExpired() ){
            blinkFace0On = !blinkFace0On;
            blinkFace0Timer.set(250);
          }  
          if(blinkFace0On){
            setColorOnFace(WHITE,0);          
          }
          if (dimAfterLoss){
            FOREACH_FACE(f) {
              setColorOnFace(dim(teamColors[currentTeamColor],150),f);
            }
          }
          
        }
      }


      
      //timers going
        if(! pointToWinnerTimer.isExpired()){
          if(winningFace < 7){
            setColorOnFace(dim(WHITE,150),winningFace);
            setColorOnFace(WHITE,(winningFace+1) % 6);
            setColorOnFace(dim(WHITE,150),(winningFace+5) % 6);
            setColorOnFace(dim(OFF,150),(winningFace+4) % 6);
            setColorOnFace(dim(OFF,150),(winningFace+3) % 6);
            setColorOnFace(dim(OFF,150),(winningFace+2) % 6);
          }
        }
        if (!checkWinnerTimer.isExpired()){
          if(isFirstTeamTreasure){
            FOREACH_FACE(f) { 
              //running timer and its my first time then act like a Bandit
              if( f <= secretNumberIterator){
                setColorOnFace(dim(teamColors[currentTeamColor],clickDim),f);
              }
            }
          }
          else if(treasureType == FullTreasure || treasureType == TeamTreasure0 || treasureType == TeamTreasure1 ||
          treasureType == TeamTreasure2 || treasureType == TeamTreasure3) {
            //running timer and not my first time as Treasure or TeamTreasure so circle spin animation
            setColorOnFace(dim(WHITE,150),checkingFace % 6);
            setColorOnFace(WHITE,(checkingFace+1) % 6);
            setColorOnFace(dim(WHITE,150),(checkingFace+2) % 6);
            setColorOnFace(OFF,(checkingFace+3) % 6);
            setColorOnFace(OFF,(checkingFace+4) % 6);
            setColorOnFace(OFF,(checkingFace+5) % 6);
            if( checkingFaceTimer.isExpired() ){
              checkingFaceTimer.set(500);
              checkingFace ++;
            }
          }
          else {
            //running timer as Bandit so just show secret number
            FOREACH_FACE(f) {
              if( f <= secretNumberIterator){
                setColorOnFace(teamColors[currentTeamColor],f);
              }      
            }
          }
        }
      if (hideSecret) {
        setColor(dim(teamColors[currentTeamColor],clickDim));
        setColorOnFace(OFF,simpleIterateFace % 6);
        setColorOnFace(OFF,(simpleIterateFace+3) % 6);
        if( simpleIterateFaceTimer.isExpired() ){
          simpleIterateFaceTimer.set(50);
          simpleIterateFace ++;
        }
      }
                    
      break;
    case GO:
      setColor(MAGENTA);
      break;
    case RESOLVE:
      setColor(WHITE);
      break;
  }
}


byte getSignalState(byte data) {
    return ((data >> 4) & 3);//returns bits A & B
}

byte getBlinkComms(byte data) {
    return (data & 15);//returns bits C , D & E
}
